
"LOAD"        { return LOAD_IST; }
"ADD"         { return ADD_IST; }
"SUB"         { return SUB_IST; }
"OR"          { return OR_IST; }
"XOR"         { return XOR_IST; }
"BRA"         { return BRA_IST; }
"BRAZ"        { return BRAZ_IST; }
"BRAL"        { return BRAL_IST; }
"BRALZ"       { return BRALZ_IST; }
"CALL"        { return CALL_IST; }
"HALT"        { return HALT_IST; }
"IN"          { return IN_IST; }
"OUT"         { return OUT_IST; }

"LOAD"        { return '0001' }
"ADD"         { return '0100' }
"SUB"         { return '0101' }
"OR"          { return '0110' }
"XOR"         { return '0111' }
"BRA"         { return '1000' }
"BRAZ"        { return '1001' }
"BRAL"        { return '1010' }
"BRALZ"       { return '1011' }
"CALL"        { return '1100' }
"HALT"        { return '1110' }
"IN"          { return '1101' }
"OUT"         { return '1111' }


statement:  LOAD_IST    { $$ =  f_Load($$); }
          | ADD_IST     { $$ =  f_Add($2, $3); }
          | SUB_IST     { $$ =  f_Sub($2, $3); }
          | OR_IST      { $$ =  f_Or($2, $3); }
          | XOR_IST     { $$ =  f_Xor($2, $3); }
          | BRA_IST     { $$ =  f_Bra($2, $3); }
          | BRAZ_IST    { $$ =  f_Braz($2, $3); }
          | BRAL_IST    { $$ =  f_Bral($3); }
          | BRALZ_IST   { $$ =  f_Bralz($2, $3); }
          | CALL_IST    { $$ =  f_Call($$); }
          | HALT_IST    { $$ =  f_Halt(); }
          | IN_IST      { $$ =  f_In($$); }
          | OUT_IST     { $$ =  f_Out($$); }
          ;
statement:  LOAD_IST    { $$ =  new F_Load($$); }
          | ADD_IST     { $$ =  new F_Add($2, $3); }
          | SUB_IST     { $$ =  new F_Sub($2, $3); }
          | OR_IST      { $$ =  new F_Or($2, $3); }
          | XOR_IST     { $$ =  new F_Xor($2, $3); }
          | BRA_IST     { $$ =  new F_Bra($2, $3); }
          | BRAZ_IST    { $$ =  new F_Braz($2, $3); }
          | BRAL_IST    { $$ =  new F_Bral($3); }
          | BRALZ_IST   { $$ =  new F_Bralz($2, $3); }
          | CALL_IST    { $$ =  new F_Call($$); }
          | HALT_IST    { $$ =  new F_Halt(); }
          | IN_IST      { $$ =  new F_In($$); }
          | OUT_IST     { $$ =  new F_Out($$); }
          ;
          %%


          //%token print
          //%token exit_command
          //%token <num> number
          //%token <id> identifier
          //%type <num> line exp term
          //%type <id> assignment






          ////////Instructions Fucntion/////////////

          void f_Load (char r){
            // RD = r;
            printf("%X", LOAD_IST);
          }
          char f_Add (char ra, char rb){
            //return RD = ra + rb;
            printf("%X\n", ADD_IST);
          }
          char f_Sub (char ra, char rb){
          //  RD = ra - rb;
          //  return RD;
            printf("%X\n", SUB_IST);
          }
          char f_Or (char ra, char rb){
          //  RD = ra | rb;
          //  return RD;
            printf("%X\n", OR_IST);
          }
          char f_Xor (char ra, char rb){
          //  RD = ra ^ rb;
          //  return RD;
            printf("%X\n", XOR_IST);
          }
          char f_Bra (char rb){
          //  PC = rb;
          //  return PC;
            printf("%X\n", BRA_IST);
          }
          char f_Braz (char ra, char rb){
          //  RD = ra | rb;
          //  return RD;
            printf("%X\n", BRAZ_IST);
          }
          char f_Bral (char rb){
          //  PC = rb;
          //  return PC;
            printf("%X\n", BRAL_IST);
          }
          char f_Bralz (char ra, char rb){
          //  if(r1 == 0)
          //    return RD = rb;
              printf("%X\n", );
          }
          char f_Call (char rb){
          //  RD = PC;
          //  PC = rb;
            printf("%X\n", CALL_IST);
          }
          void f_Halt (){
            printf("%X\n", HALT_IST);
          }
          void f_In (){
            //RD = input;
            printf("%X\n", IN_IST);
          }
          char f_Out (char ra){
            //out = ra;
            printf("%X\n", OUT_IST);
          }

          //char *instructions[] = {NULL, "LOAD", "ADD", "SUB", "OR", "XOR", "BRA","BRAZ", "BRAL", "BRALZ", "CALL", "HALT", "IN", "OUT"};
